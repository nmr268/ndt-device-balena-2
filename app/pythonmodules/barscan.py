#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""Get a barcode.

This module is waiting for a barcode is scanned and delivered through
the serial port.
When a barcode is received, it is stored in a file.

"""

__copyright__ = "Copyright (C) 2020 Nordetect"

## NMR migration to Python 3.8 - new use of time functions

import sys
try:
    from simulate import fake_barcode
except ImportError:
    fake_barcode = ""
#from time import sleep, clock_gettime, CLOCK_MONOTONIC # NMR XX
from time import sleep, process_time
from serial import Serial


class BarscanError(Exception):

    """Base class for all errors generated by this module."""

    pass


class UserTimeoutError(BarscanError):

    """Exception for timeout while waiting for a barcode."""

    def __init__(self) -> None:
        """Standard init function just calling the parent with a desciption."""
        super().__init__(self, "Got timeout while waiting for a barcode.")


class BarcodeError(BarscanError):

    """Exception when the barcode is not valid."""

    def __init__(self) -> None:
        """Standard init function just calling the parent with a desciption."""
        super().__init__(self, "Did not get a valid barcode.")


class IllegalTimeoutError(BarscanError):

    """Exception given an illegal timeout value."""

    def __init__(self, timeout: float) -> None:
        """Standard init function just calling the parent with a desciption."""
        super().__init__(self, "Timeout given, {0}, is not valid.".format(timeout))


def save_barcode(barcode: str, filename: str) -> None:
    """Save a barcode to a file.

    Parameters:
        barcode: The barcode to save.
        filename: The file to save in.

    """
    with open(filename, "w") as file:
        file.write(barcode)
        file.write("\n")


def scan(timeout: float = 30.0, length: int = 50, trailingchars: int = 1) -> str:
    """Scan for a barcode.

    Parameters:
        timeout: Wait at most timeout seconds for the barcode.
        length: The expected length. Will fail if it is shorter.
        trailingchars: Number of characters after the actual barcode.
            The default of 1 correspond to a newline character.
    Returns:
        The scanned barcode or and empty string on failure.

    """
    if timeout < 1:
        raise IllegalTimeoutError(timeout)
    barcode = ""
    if fake_barcode:
        barcode = fake_barcode
    else:
        # Barcode scanner activation
        baudrate = 9600
        bytetime = 10/baudrate
        port = Serial("/dev/ttyACM0", baudrate=baudrate, timeout=1, inter_byte_timeout=bytetime*1.1)
        try:
            port.reset_input_buffer()
            # Enable scanner during analysis
            port.write(b'\x02\x01\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\xF8')
            try:
                received_chars = b''
                received_count = 0
                #start_time = clock_gettime(CLOCK_MONOTONIC) ## NMR XX
                start_time = process_time()
                current_time = start_time
                waiting_chars = port.inWaiting()
                while (waiting_chars == 0) and (current_time - start_time < timeout):
                    waiting_chars = port.inWaiting()
                    sleep(0.5)
                    #current_time = clock_gettime(CLOCK_MONOTONIC) ## NMR XX
                    current_time = process_time()
                if waiting_chars == 0:
                    raise UserTimeoutError
                else:
                    received_chars = port.read(length)
                    # NMR Initially we will read whole barcode and see what we need to strip off
                    # received_count = len(received_chars)
                    # if received_count < length:
                    #     raise BarcodeError
                    # else:
                    barcode = received_chars.decode("utf-8", "replace")
                    #     # Read the expected trailing characters
                    #     port.read(trailingchars)
            finally:
                # Disable the scanner
                port.write(b'\x02\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\xF9')
                # Wait for all to be writen
                port.flush()
        finally:
            # Close the port
            port.close()
    return barcode

def close_scanner():
    """
    Close scanner
    """
        # Barcode scanner activation
    baudrate = 9600
    bytetime = 10/baudrate
    port = Serial("/dev/ttyACM0", baudrate=baudrate, timeout=1, inter_byte_timeout=bytetime*1.1)
    port.reset_input_buffer()
    # Disable the scanner
    port.flush()
    port.write(b'\x02\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\xF9')
    port.close()

if __name__ == '__main__':
    from sys import argv, stderr
    try:
        # If one argument, use it as the output filename
        argc = len(argv)-1
        if argc == 0:
            barcode = scan()
            outfile = "barcode.txt"
        else:
            outfile = argv[1]
            if argc == 1:
                barcode = scan()
            elif argc == 2:
                timeout = int(argv[2])
                if timeout < 1 or timeout > 600:
                    raise IllegalTimeoutError(timeout)
                barcode = scan(timeout)
        print(barcode)
        save_barcode(barcode, outfile)
    except Exception as e:
        print(e, file=stderr)
        sys.exit(1)
